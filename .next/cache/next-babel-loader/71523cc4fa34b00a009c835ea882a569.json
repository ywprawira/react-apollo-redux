{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initState = {\n  cart: []\n};\n\nconst cart = (state = initState, action) => {\n  switch (action.type) {\n    case \"ADD_TO_CART\":\n      let updateCart = [...state.cart, action.item];\n\n      if (state.cart.length) {\n        const sameItem = state.cart.findIndex(item => item.id === action.item.id);\n\n        if (sameItem != -1) {\n          state.cart[sameItem].qty += action.item.qty;\n          updateCart = [...state.cart];\n        }\n      }\n\n      return _objectSpread({}, state, {\n        cart: updateCart\n      });\n      break;\n\n    case \"REMOVE_FROM_CART\":\n      let newArr = state.cart.filter(function (obj) {\n        return obj.id !== action.id;\n      });\n      return _objectSpread({}, state, {\n        cart: newArr\n      });\n      break;\n\n    case \"UPDATE_CART\":\n      console.log(action);\n      updateCart = [...state.cart];\n\n      if (state.cart.length) {\n        const sameItem = state.cart.findIndex(item => item.id === action.id);\n\n        if (sameItem != -1) {\n          state.cart[sameItem].qty = parseInt(action.qty);\n        }\n      }\n\n      return _objectSpread({}, state, {\n        cart: updateCart\n      });\n      break;\n\n    case \"CLEAR_ALL\":\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport { cart };","map":{"version":3,"sources":["C:/Users/icube/Documents/Yuda Folder/react/next/next-js-apollo-redux/redux/reducer/reducerCart.js"],"names":["initState","cart","state","action","type","updateCart","item","length","sameItem","findIndex","id","qty","newArr","filter","obj","console","log","parseInt"],"mappings":";;;;;;AAAA,MAAMA,SAAS,GAAG;AACdC,EAAAA,IAAI,EAAE;AADQ,CAAlB;;AAKA,MAAMA,IAAI,GAAG,CAACC,KAAK,GAAGF,SAAT,EAAoBG,MAApB,KAA+B;AACxC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI,UAAIC,UAAU,GAAG,CAAC,GAAGH,KAAK,CAACD,IAAV,EAAeE,MAAM,CAACG,IAAtB,CAAjB;;AACA,UAAGJ,KAAK,CAACD,IAAN,CAAWM,MAAd,EAAsB;AAClB,cAAMC,QAAQ,GAAGN,KAAK,CAACD,IAAN,CAAWQ,SAAX,CAAqBH,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYP,MAAM,CAACG,IAAP,CAAYI,EAArD,CAAjB;;AACI,YAAGF,QAAQ,IAAI,CAAC,CAAhB,EAAmB;AACfN,UAAAA,KAAK,CAACD,IAAN,CAAWO,QAAX,EAAqBG,GAArB,IAA4BR,MAAM,CAACG,IAAP,CAAYK,GAAxC;AACAN,UAAAA,UAAU,GAAG,CAAC,GAAGH,KAAK,CAACD,IAAV,CAAb;AACH;AACR;;AACD,+BAAWC,KAAX;AAAkBD,QAAAA,IAAI,EAAEI;AAAxB;AACA;;AACJ,SAAK,kBAAL;AACI,UAAIO,MAAM,GAAGV,KAAK,CAACD,IAAN,CAAWY,MAAX,CAAkB,UAAUC,GAAV,EAAgB;AAC3C,eAAOA,GAAG,CAACJ,EAAJ,KAAWP,MAAM,CAACO,EAAzB;AACH,OAFY,CAAb;AAGA,+BAAWR,KAAX;AAAkBD,QAAAA,IAAI,EAAEW;AAAxB;AACA;;AACJ,SAAK,aAAL;AACIG,MAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AACAE,MAAAA,UAAU,GAAG,CAAC,GAAGH,KAAK,CAACD,IAAV,CAAb;;AACA,UAAGC,KAAK,CAACD,IAAN,CAAWM,MAAd,EAAsB;AAClB,cAAMC,QAAQ,GAAGN,KAAK,CAACD,IAAN,CAAWQ,SAAX,CAAqBH,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYP,MAAM,CAACO,EAAhD,CAAjB;;AACI,YAAGF,QAAQ,IAAI,CAAC,CAAhB,EAAmB;AACfN,UAAAA,KAAK,CAACD,IAAN,CAAWO,QAAX,EAAqBG,GAArB,GAA2BM,QAAQ,CAACd,MAAM,CAACQ,GAAR,CAAnC;AACH;AACR;;AACD,+BAAWT,KAAX;AAAkBD,QAAAA,IAAI,EAAEI;AAAxB;AACA;;AACJ,SAAK,WAAL;AAEI;;AAEJ;AAAS,aAAOH,KAAP;AAjCb;AAmCH,CApCD;;AAsCA,SAAQD,IAAR","sourcesContent":["const initState = {\r\n    cart: [] \r\n}\r\n\r\n\r\nconst cart = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_TO_CART\":\r\n            let updateCart = [...state.cart,action.item];\r\n            if(state.cart.length) {\r\n                const sameItem = state.cart.findIndex(item => item.id === action.item.id)\r\n                    if(sameItem != -1) {\r\n                        state.cart[sameItem].qty += action.item.qty;\r\n                        updateCart = [...state.cart]\r\n                    }\r\n            }\r\n            return {...state, cart: updateCart}\r\n            break;\r\n        case \"REMOVE_FROM_CART\":\r\n            let newArr = state.cart.filter(function( obj ) {\r\n                return obj.id !== action.id;\r\n            });\r\n            return {...state, cart: newArr}\r\n            break;\r\n        case \"UPDATE_CART\":\r\n            console.log(action)\r\n            updateCart = [...state.cart];\r\n            if(state.cart.length) {\r\n                const sameItem = state.cart.findIndex(item => item.id === action.id)\r\n                    if(sameItem != -1) {\r\n                        state.cart[sameItem].qty = parseInt(action.qty);\r\n                    }\r\n            }\r\n            return {...state, cart: updateCart}\r\n            break;\r\n        case \"CLEAR_ALL\":\r\n            \r\n            break;\r\n    \r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport {cart};\r\n"]},"metadata":{},"sourceType":"module"}