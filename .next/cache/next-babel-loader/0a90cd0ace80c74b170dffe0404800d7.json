{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\icube\\\\Documents\\\\Yuda Folder\\\\react\\\\next\\\\next-js-apollo-redux\\\\lib\\\\apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nvar globalApolloClient = null;\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, apolloClient, pageProps, _await$import, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n              // we can use it in `PageComponent.getInitialProp`.\n\n              apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              pageProps = _context.sent;\n\n            case 7:\n              if (!false) {\n                _context.next = 24;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 10:\n              if (!ssr) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 14:\n              _await$import = _context.sent;\n              getDataFromTree = _await$import.getDataFromTree;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 15\n                }\n              })));\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](11);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error('Error while running `getDataFromTree`', _context.t0);\n\n            case 23:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 24:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[11, 20]], Promise);\n    };\n  }\n\n  return WithApollo;\n}\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {Object} initialState\r\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'https://swiftpwa-be.testingnow.me/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch: fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/Users/icube/Documents/Yuda Folder/react/next/next-js-apollo-redux/lib/apollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","fetch","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","link","uri","credentials","restore"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Head from 'next/head'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nlet globalApolloClient = null\r\n\r\n/**\r\n * Creates and provides the apolloContext\r\n * to a next.js PageTree. Use it by wrapping\r\n * your PageComponent via HOC pattern.\r\n * @param {Function|Class} PageComponent\r\n * @param {Object} [config]\r\n * @param {Boolean} [config.ssr=true]\r\n */\r\nexport function withApollo(PageComponent, { ssr = true } = {}) {\r\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\r\n    const client = apolloClient || initApolloClient(apolloState)\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <PageComponent {...pageProps} />\r\n      </ApolloProvider>\r\n    )\r\n  }\r\n\r\n  // Set the correct displayName in development\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const displayName =\r\n      PageComponent.displayName || PageComponent.name || 'Component'\r\n\r\n    if (displayName === 'App') {\r\n      console.warn('This withApollo HOC only works with PageComponents.')\r\n    }\r\n\r\n    WithApollo.displayName = `withApollo(${displayName})`\r\n  }\r\n\r\n  if (ssr || PageComponent.getInitialProps) {\r\n    WithApollo.getInitialProps = async ctx => {\r\n      const { AppTree } = ctx\r\n\r\n      // Initialize ApolloClient, add it to the ctx object so\r\n      // we can use it in `PageComponent.getInitialProp`.\r\n      const apolloClient = (ctx.apolloClient = initApolloClient())\r\n\r\n      // Run wrapped getInitialProps methods\r\n      let pageProps = {}\r\n      if (PageComponent.getInitialProps) {\r\n        pageProps = await PageComponent.getInitialProps(ctx)\r\n      }\r\n\r\n      // Only on the server:\r\n      if (typeof window === 'undefined') {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        if (ctx.res && ctx.res.finished) {\r\n          return pageProps\r\n        }\r\n\r\n        // Only if ssr is enabled\r\n        if (ssr) {\r\n          try {\r\n            // Run all GraphQL queries\r\n            const { getDataFromTree } = await import('@apollo/react-ssr')\r\n            await getDataFromTree(\r\n              <AppTree\r\n                pageProps={{\r\n                  ...pageProps,\r\n                  apolloClient,\r\n                }}\r\n              />\r\n            )\r\n          } catch (error) {\r\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n            // Handle them in components via the data.error prop:\r\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n            console.error('Error while running `getDataFromTree`', error)\r\n          }\r\n\r\n          // getDataFromTree does not call componentWillUnmount\r\n          // head side effect therefore need to be cleared manually\r\n          Head.rewind()\r\n        }\r\n      }\r\n\r\n      // Extract query data from the Apollo store\r\n      const apolloState = apolloClient.cache.extract()\r\n\r\n      return {\r\n        ...pageProps,\r\n        apolloState,\r\n      }\r\n    }\r\n  }\r\n\r\n  return WithApollo\r\n}\r\n\r\n/**\r\n * Always creates a new apollo client on the server\r\n * Creates or reuses apollo client in the browser.\r\n * @param  {Object} initialState\r\n */\r\nfunction initApolloClient(initialState) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (typeof window === 'undefined') {\r\n    return createApolloClient(initialState)\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!globalApolloClient) {\r\n    globalApolloClient = createApolloClient(initialState)\r\n  }\r\n\r\n  return globalApolloClient\r\n}\r\n\r\n/**\r\n * Creates and configures the ApolloClient\r\n * @param  {Object} [initialState={}]\r\n */\r\nfunction createApolloClient(initialState = {}) {\r\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\r\n    link: new HttpLink({\r\n      uri: 'https://swiftpwa-be.testingnow.me/graphql', // Server URL (must be absolute)\r\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\r\n      fetch,\r\n    }),\r\n    cache: new InMemoryCache().restore(initialState),\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}